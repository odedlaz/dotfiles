#!/usr/bin/env python
# sh is mighty! have a look: https://github.com/amoffat/sh
import sh
from contextlib import contextmanager
import requests
import sys
import os
import re
import logging
import functools
from time import time
from tempfile import gettempdir as tmpdir

logging.basicConfig(format='%(asctime)s - %(name)s - %(message)s',
                    filename=os.path.join(tmpdir(), 'polybar.log'),
                    level=logging.ERROR,
                    filemode="a+")

logger = logging.getLogger("polybar.plugins.weather")
__dir__ = os.path.dirname(os.path.realpath(__file__))


def printf(fmt, *args, **kwargs):
    print(fmt.format(*args, **kwargs))


@contextmanager
def timeit(op):
    now = time()
    yield
    print(f"'{op}' took: {time() - now:.2f} secs")


def exit_on_exception(exitcode):
    def decorator(fn):
        @functools.wraps(fn)
        def wrapper(*args, **kwargs):
            try:
                return fn(*args, **kwargs)
            except sh.ErrorReturnCode as e:
                cmd = e.full_cmd.strip()
                errtxt = e.stderr.decode('utf-8').strip()
                logger.error(f"[{cmd}] - {errtxt}")
                sys.exit(exitcode)
            except Exception as e:
                logger.error(e)
                sys.exit(exitcode)
        return wrapper
    return decorator


def get_wireless_interfaces():
    rx = re.compile('^(.*): ')
    # get all wireless interfaces
    yield from (m.group(1) for m
                in map(rx.match, open('/proc/net/wireless'))
                if m)


def get_access_points():
    rx = re.compile('([0-9A-F]{2}(:[0-9A-F]{2}){5})', re.IGNORECASE)
    for iface in get_wireless_interfaces():
        matches = rx.findall(sh.iw(iface, "scan").stdout.decode('utf-8'))
        yield from (x[0].strip().lower() for x in matches)


@exit_on_exception(exitcode=1)
def get_geolocation():
    keypath = f"{__dir__}/googleapi_key"
    if not os.path.exists(keypath):
        raise IOError(f"'{keypath}' doesn't exist")

    access_points = [{"macAddress": hwaddr}
                     for hwaddr in set(get_access_points())]

    data = {"considerIp": True,
            "wifiAccessPoints": access_points}

    params = {"key": open(keypath, "r").read().strip()}

    r = requests.post("https://www.googleapis.com/geolocation/v1/geolocate",
                      json=data, params=params)
    if not r.ok:
        raise IOError(r.text)

    location = r.json()["location"]
    return location["lng"], location["lat"]


@exit_on_exception(exitcode=3)
def get_geocode(latitude, longitude):
    keypath = f"{__dir__}/googleapi_key"
    if not os.path.exists(keypath):
        raise IOError(f"'{keypath}' doesn't exist")

    params = {"key": open(keypath, "r").read().strip(),
              "latlng": f"{latitude},{longitude}"}

    r = requests.get("https://maps.googleapis.com/maps/api/geocode/json",
                     params=params)
    if not r.ok:
        raise IOError(r.text)

    for res in r.json()['results']:
        for address in res['address_components']:
            if 'locality' in address['types']:
                return address['short_name']


@exit_on_exception(exitcode=2)
def get_weather_forecast(longitude, latitude):
    keypath = f"{__dir__}/openweathermap_key"
    if not os.path.exists(keypath):
        raise IOError(f"'{keypath}' doesn't exist")

    params = {"units": "metric",
              "appid": open(keypath, "r").read().strip(),
              "lat": latitude, "lon": longitude}

    resp = requests.get("https://api.openweathermap.org/data/2.5/weather",
                        params=params)
    if not resp.ok:
        raise IOError(resp.text)

    return resp.json()


@exit_on_exception(exitcode=4)
def echo(location, forecast):
    print((f"{location}"
           f" {forecast['main']['temp']:.0f}Â°C"
           f" [{forecast['weather'][0]['main']}]"))


if __name__ == "__main__":

    # get geolocation using google maps api
    longitude, latitude = get_geolocation()
    # get geo code using google maps api
    location = get_geocode(latitude, longitude)
    # get weather data from open weather map
    forecast = get_weather_forecast(longitude, latitude)
    # format and dump to stdout
    echo(location, forecast)
